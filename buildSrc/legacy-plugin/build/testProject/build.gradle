
        buildscript {
            repositories {
                jcenter()
            }
            dependencies {
                classpath group: 'xmlunit', name: 'xmlunit', version: '1.6'
            }
        }

        plugins {
            id 'de.dfki.mary.voicebuilding-legacy'
            id 'de.dfki.mary.voicebuilding-festvox'
        }

        group "de.dfki.mary"
        version "1.2.3"

        voice {
            name = "cmu-time-awb"
            gender = "male"
            region = "GB"
            license {
                url = "http://mary.dfki.de/download/arctic-license.html"
            }
        }

        repositories {
            ivy {
                url 'http://festvox.org/examples'
                layout 'pattern', {
                    artifact '[module]_[classifier]/packed/[artifact].[ext]'
                }
            }
        }

        dependencies {
            data group: 'org.festvox', name: 'cmu_time_awb', classifier: 'ldom', ext: 'tar.bz2'
        }

        text.srcFileName = 'time.data'

        legacyInit.dependsOn wav, text, lab

        generateAllophones.dependsOn legacyInit

        task testPlugins(group: 'Verification') << {
            assert plugins.findPlugin('de.dfki.mary.voicebuilding-legacy')
            assert plugins.findPlugin('de.dfki.mary.voicebuilding-base')
            assert plugins.findPlugin('de.dfki.mary.voicebuilding-data')
            assert plugins.findPlugin('de.dfki.mary.voicebuilding-festvox')
        }

        task testTemplates(group: 'Verification') {
            dependsOn templates
            doLast {
                assert fileTree(buildDir).include('templates/*.config').files
            }
        }

        task testLegacyInit(group: 'Verification') {
            dependsOn legacyInit
            doLast {
                assert file("$buildDir/database.config").exists()
            }
        }

        task testLegacyPraatPitchmarker(group: 'Verification') {
            dependsOn legacyPraatPitchmarker
            doLast {
                assert fileTree(buildDir).include('pm/*.PointProcess').files
                assert fileTree(buildDir).include('pm/*.pm').files
            }
        }

        task testLegacyMCEPMaker(group: 'Verification') {
            dependsOn legacyMCEPMaker
            doLast {
                assert fileTree(buildDir).include('mcep/*.mcep').files
            }
        }

        task testLegacyPhoneUnitLabelComputer(group: 'Verification') {
            dependsOn legacyPhoneUnitLabelComputer
            doLast {
                assert fileTree(buildDir).include('phonelab/*.lab').files
            }
        }

        task testLegacyHalfPhoneUnitLabelComputer(group: 'Verification') {
            dependsOn legacyHalfPhoneUnitLabelComputer
            doLast {
                assert fileTree(buildDir).include('halfphonelab/*.hplab').files
            }
        }

        task testLegacyTranscriptionAligner(group: 'Verification') {
            dependsOn legacyTranscriptionAligner
            doLast {
                assert fileTree(buildDir).include('allophones/*.xml').files
            }
        }

        task testLegacyFeatureLister(group: 'Verification') {
            dependsOn legacyFeatureLister
            doLast {
                assert file("$buildDir/mary/features.txt").exists()
            }
        }

        task testLegacyPhoneUnitFeatureComputer(group: 'Verification') {
            dependsOn legacyPhoneUnitFeatureComputer
            doLast {
                assert fileTree(buildDir).include('phonefeatures/*.pfeats').files
            }
        }

        task testLegacyHalfPhoneUnitFeatureComputer(group: 'Verification') {
            dependsOn legacyHalfPhoneUnitFeatureComputer
            doLast {
                assert fileTree(buildDir).include('halfphonefeatures/*.hpfeats').files
            }
        }

        task testLegacyWaveTimelineMaker(group: 'Verification') {
            dependsOn legacyWaveTimelineMaker
            doLast {
                assert file("$buildDir/mary/timeline_waveforms.mry").exists()
            }
        }

        task testLegacyBasenameTimelineMaker(group: 'Verification') {
            dependsOn legacyBasenameTimelineMaker
            doLast {
                assert file("$buildDir/mary/timeline_basenames.mry").exists()
            }
        }

        task testLegacyMCepTimelineMaker(group: 'Verification') {
            dependsOn legacyMCepTimelineMaker
            doLast {
                assert file("$buildDir/mary/timeline_mcep.mry").exists()
            }
        }

        task testLegacyPhoneUnitfileWriter(group: 'Verification') {
            dependsOn legacyPhoneUnitfileWriter
            doLast {
                assert file("$buildDir/mary/phoneUnits.mry").exists()
            }
        }

        task testLegacyHalfPhoneUnitfileWriter(group: 'Verification') {
            dependsOn legacyHalfPhoneUnitfileWriter
            doLast {
                assert file("$buildDir/mary/halfphoneUnits.mry").exists()
            }
        }

        task testLegacyPhoneFeatureFileWriter(group: 'Verification') {
            dependsOn legacyPhoneFeatureFileWriter
            doLast {
                assert file("$buildDir/mary/phoneFeatures.mry").exists()
                assert file("$buildDir/mary/phoneUnitFeatureDefinition.txt").exists()
            }
        }

        task testLegacyHalfPhoneFeatureFileWriter(group: 'Verification') {
            dependsOn legacyHalfPhoneFeatureFileWriter
            doLast {
                assert file("$buildDir/mary/halfphoneFeatures.mry").exists()
                assert file("$buildDir/mary/halfphoneUnitFeatureDefinition.txt").exists()
            }
        }

        task testLegacyF0PolynomialFeatureFileWriter(group: 'Verification') {
            dependsOn legacyF0PolynomialFeatureFileWriter
            doLast {
                assert file("$buildDir/mary/syllableF0Polynomials.mry").exists()
            }
        }

        task testLegacyAcousticFeatureFileWriter(group: 'Verification') {
            dependsOn legacyAcousticFeatureFileWriter
            doLast {
                assert file("$buildDir/mary/halfphoneFeatures_ac.mry").exists()
                assert file("$buildDir/mary/halfphoneUnitFeatureDefinition_ac.txt").exists()
            }
        }

        task testLegacyJoinCostFileMaker(group: 'Verification') {
            dependsOn legacyJoinCostFileMaker
            doLast {
                assert file("$buildDir/mary/joinCostFeatures.mry").exists()
                assert file("$buildDir/mary/joinCostWeights.txt").exists()
            }
        }

        task testLegacyCARTBuilder(group: 'Verification') {
            dependsOn legacyCARTBuilder
            doLast {
                assert file("$buildDir/mary/cart.mry").exists()
            }
        }

        task testLegacyDurationCARTTrainer(group: 'Verification') {
            dependsOn legacyDurationCARTTrainer
            doLast {
                assert file("$buildDir/mary/dur.tree").exists()
            }
        }

        task testLegacyF0CARTTrainer(group: 'Verification') {
            dependsOn legacyF0CARTTrainer
            doLast {
                assert file("$buildDir/mary/f0.left.tree").exists()
                assert file("$buildDir/mary/f0.mid.tree").exists()
                assert file("$buildDir/mary/f0.right.tree").exists()
            }
        }

        task testProcessResources(group: 'Verification') {
            dependsOn processResources
            doLast {
                def prefix = "$sourceSets.main.output.resourcesDir/marytts/voice/CmuTimeAwb"
                assert file("$prefix/cart.mry").exists()
                assert file("$prefix/dur.tree").exists()
                assert file("$prefix/f0.left.tree").exists()
                assert file("$prefix/f0.mid.tree").exists()
                assert file("$prefix/f0.right.tree").exists()
                assert file("$prefix/halfphoneUnitFeatureDefinition_ac.txt").exists()
                assert file("$prefix/joinCostWeights.txt").exists()
            }
        }

        task testProcessLegacyResources(group: 'Verification') {
            dependsOn processLegacyResources
            doLast {
                def prefix = "$sourceSets.legacy.output.resourcesDir/lib/voices/cmu-time-awb"
                assert file("$prefix/halfphoneFeatures_ac.mry").exists()
                assert file("$prefix/halfphoneUnits.mry").exists()
                assert file("$prefix/joinCostFeatures.mry").exists()
                assert file("$prefix/timeline_basenames.mry").exists()
                assert file("$prefix/timeline_waveforms.mry").exists()
            }
        }

        task testGenerateVoiceConfig(group: 'Verification') {
            dependsOn generateVoiceConfig
            doLast {
                def configFile = file("$buildDir/resources/main/marytts/voice/CmuTimeAwb/voice.config")
                assert configFile.exists()
                def actual = [:]
                configFile.eachLine { line ->
                    switch(line) {
                        case ~/.+=.+/:
                            def (key, value) = line.split('=', 2)
                            actual[key.trim()] = value.trim()
                            break
                        default:
                            break
                    }
                }
                def expected = [
                        name                                         : "cmu-time-awb",
                        locale                                       : "en_GB",
                        'unitselection.voices.list'                  : "cmu-time-awb",
                        "voice.cmu-time-awb.acousticModels"          : 'duration F0 midF0 rightF0',
                        "voice.cmu-time-awb.audioTimelineFile"       : "MARY_BASE/lib/voices/cmu-time-awb/timeline_waveforms.mry",
                        "voice.cmu-time-awb.audioTimelineReaderClass": 'marytts.unitselection.data.TimelineReader',
                        "voice.cmu-time-awb.basenameTimeline"        : "MARY_BASE/lib/voices/cmu-time-awb/timeline_basenames.mry",
                        "voice.cmu-time-awb.cartFile"                : 'jar:/marytts/voice/CmuTimeAwb/cart.mry',
                        "voice.cmu-time-awb.cartReaderClass"         : 'marytts.cart.io.MARYCartReader',
                        "voice.cmu-time-awb.concatenatorClass"       : 'marytts.unitselection.concat.OverlapUnitConcatenator',
                        "voice.cmu-time-awb.databaseClass"           : 'marytts.unitselection.data.DiphoneUnitDatabase',
                        "voice.cmu-time-awb.domain"                  : 'general',
                        "voice.cmu-time-awb.duration.attribute"      : 'd',
                        "voice.cmu-time-awb.duration.data"           : "jar:/marytts/voice/CmuTimeAwb/dur.tree",
                        "voice.cmu-time-awb.duration.model"          : 'cart',
                        "voice.cmu-time-awb.F0.applyTo"              : 'firstVoicedSegments',
                        "voice.cmu-time-awb.F0.attribute"            : 'f0',
                        "voice.cmu-time-awb.F0.attribute.format"     : '(0,%.0f)',
                        "voice.cmu-time-awb.F0.data"                 : "jar:/marytts/voice/CmuTimeAwb/f0.left.tree",
                        "voice.cmu-time-awb.F0.model"                : 'cart',
                        "voice.cmu-time-awb.F0.predictFrom"          : 'firstVowels',
                        "voice.cmu-time-awb.featureFile"             : "MARY_BASE/lib/voices/cmu-time-awb/halfphoneFeatures_ac.mry",
                        "voice.cmu-time-awb.gender"                  : "male",
                        "voice.cmu-time-awb.joinCostClass"           : 'marytts.unitselection.select.JoinCostFeatures',
                        "voice.cmu-time-awb.joinCostFile"            : "MARY_BASE/lib/voices/cmu-time-awb/joinCostFeatures.mry",
                        "voice.cmu-time-awb.joinCostWeights"         : 'jar:/marytts/voice/CmuTimeAwb/joinCostWeights.txt',
                        "voice.cmu-time-awb.midF0.applyTo"           : 'firstVowels',
                        "voice.cmu-time-awb.midF0.attribute"         : 'f0',
                        "voice.cmu-time-awb.midF0.attribute.format"  : '(50,%.0f)',
                        "voice.cmu-time-awb.midF0.data"              : "jar:/marytts/voice/CmuTimeAwb/f0.mid.tree",
                        "voice.cmu-time-awb.midF0.model"             : 'cart',
                        "voice.cmu-time-awb.midF0.predictFrom"       : 'firstVowels',
                        "voice.cmu-time-awb.locale"                  : "en_GB",
                        "voice.cmu-time-awb.rightF0.applyTo"         : 'lastVoicedSegments',
                        "voice.cmu-time-awb.rightF0.attribute"       : 'f0',
                        "voice.cmu-time-awb.rightF0.attribute.format": '(100,%.0f)',
                        "voice.cmu-time-awb.rightF0.data"            : "jar:/marytts/voice/CmuTimeAwb/f0.right.tree",
                        "voice.cmu-time-awb.rightF0.model"           : 'cart',
                        "voice.cmu-time-awb.rightF0.predictFrom"     : 'firstVowels',
                        "voice.cmu-time-awb.samplingRate"            : '16000',
                        "voice.cmu-time-awb.selectorClass"           : 'marytts.unitselection.select.DiphoneUnitSelector',
                        "voice.cmu-time-awb.targetCostClass"         : 'marytts.unitselection.select.DiphoneFFRTargetCostFunction',
                        "voice.cmu-time-awb.targetCostWeights"       : 'jar:/marytts/voice/CmuTimeAwb/halfphoneUnitFeatureDefinition_ac.txt',
                        "voice.cmu-time-awb.unitReaderClass"         : 'marytts.unitselection.data.UnitFileReader',
                        "voice.cmu-time-awb.unitsFile"               : "MARY_BASE/lib/voices/cmu-time-awb/halfphoneUnits.mry",
                        "voice.cmu-time-awb.viterbi.beamsize"        : '100',
                        "voice.cmu-time-awb.viterbi.wTargetCosts"    : '0.7',
                ]
                assert actual == expected
            }
        }

        import java.util.zip.ZipFile

        task testJar(group: 'Verification') {
            dependsOn jar
            doLast {
                def actual = new ZipFile(jar.archivePath).entries().findAll { !it.isDirectory() }.collect { it.name } as Set
                def expected = [
                    'META-INF/MANIFEST.MF',
                    'META-INF/services/marytts.config.MaryConfig',
                    "META-INF/maven/de.dfki.mary/voice-cmu-time-awb/pom.xml",
                    "META-INF/maven/de.dfki.mary/voice-cmu-time-awb/pom.properties",
                    "marytts/voice/CmuTimeAwb/Config.class",
                    "marytts/voice/CmuTimeAwb/cart.mry",
                    "marytts/voice/CmuTimeAwb/dur.tree",
                    "marytts/voice/CmuTimeAwb/f0.left.tree",
                    "marytts/voice/CmuTimeAwb/f0.mid.tree",
                    "marytts/voice/CmuTimeAwb/f0.right.tree",
                    "marytts/voice/CmuTimeAwb/halfphoneUnitFeatureDefinition_ac.txt",
                    "marytts/voice/CmuTimeAwb/joinCostWeights.txt",
                    "marytts/voice/CmuTimeAwb/voice.config"
                ] as Set
                assert actual == expected
            }
        }

        task testLegacyZip(group: 'Verification') {
            dependsOn legacyZip
            doLast {
                def actual = new ZipFile(legacyZip.archivePath).entries().findAll { !it.isDirectory() }.collect { it.name } as Set
                def expected = [
                    "lib/voices/cmu-time-awb/halfphoneFeatures_ac.mry",
                    "lib/voices/cmu-time-awb/halfphoneUnits.mry",
                    "lib/voices/cmu-time-awb/joinCostFeatures.mry",
                    "lib/voices/cmu-time-awb/timeline_basenames.mry",
                    "lib/voices/cmu-time-awb/timeline_waveforms.mry",
                    "lib/$jar.archiveName"
                ] as Set
                assert actual == expected
            }
        }
        
        import org.custommonkey.xmlunit.XMLUnit

        task testLegacyDescriptor(group: 'Verification') {
            dependsOn legacyDescriptor
            doLast {
                ant.checksum file: legacyZip.archivePath, algorithm: 'MD5', property: 'md5Hash'
                def expected = """<?xml version="1.0"?>
            <marytts-install xmlns="http://mary.dfki.de/installer">
                <voice locale="en_GB" name="cmu-time-awb" gender="male" type="unit selection" version="1.2.3">
                    <description>A male English unit selection voice</description>
                    <license href="http://mary.dfki.de/download/arctic-license.html"/>
                    <package md5sum="$ant.md5Hash" filename="$legacyZip.archiveName" size="${legacyZip.archivePath.size()}">
                        <location folder="true" href="http://mary.dfki.de/download/5.2-beta2/"/>
                    </package>
                    <depends language="en-GB" version="5.2-beta2"/>
                </voice>
            </marytts-install>"""
                def actual = legacyDescriptor.destFile.text
                XMLUnit.ignoreWhitespace = true
                assert XMLUnit.compareXML(expected, actual).similar()
            }
        }
        